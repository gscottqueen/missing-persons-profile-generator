import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { personData } = await request.json();

    if (!personData) {
      return NextResponse.json(
        { error: "Person data is required" },
        { status: 400 }
      );
    }

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: "OpenAI API key not configured" },
        { status: 500 }
      );
    }

    const { missingSince, dateOfBirth, image1 } = personData;

    if (!image1) {
      return NextResponse.json(
        { error: "Original image is required for age progression" },
        { status: 400 }
      );
    }

    // Calculate age progression
    // Extract date from missingSince (might contain location after date)
    // Look for common date patterns and extract just the date part
    let missingSinceDate = missingSince;
    const datePatterns = [
      /^[A-Za-z]+ \d{1,2}, \d{4}/,  // "December 12, 2022"
      /^\d{1,2}\/\d{1,2}\/\d{4}/,   // "12/12/2022"
      /^\d{4}-\d{1,2}-\d{1,2}/      // "2022-12-12"
    ];

    for (const pattern of datePatterns) {
      const match = missingSince.match(pattern);
      if (match) {
        missingSinceDate = match[0];
        break;
      }
    }

    console.log("Original missing since:", missingSince);
    console.log("Extracted missing date:", missingSinceDate);

    const missingDate = new Date(missingSinceDate);
    const currentDate = new Date();
    const yearsPassedSinceMissing = Math.floor((currentDate.getTime() - missingDate.getTime()) / (1000 * 60 * 60 * 24 * 365.25));

    // Calculate current age if we have birth date
    let estimatedCurrentAge: string | number = "unknown";
    console.log("Date of birth:", dateOfBirth);
    console.log("Missing since:", missingSince);
    console.log("Parsed missing date:", missingDate);

    if (dateOfBirth && dateOfBirth !== "unknown" && dateOfBirth.trim() !== "") {
      try {
        const birthDate = new Date(dateOfBirth);
        console.log("Parsed birth date:", birthDate);

        if (!isNaN(birthDate.getTime()) && !isNaN(missingDate.getTime())) {
          const ageAtMissing = Math.floor((missingDate.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24 * 365.25));
          estimatedCurrentAge = ageAtMissing + yearsPassedSinceMissing;
          console.log("Age at missing:", ageAtMissing);
          console.log("Estimated current age:", estimatedCurrentAge);
        } else {
          console.log("Invalid birth date or missing date");
        }
      } catch (error) {
        console.log("Error parsing birth date:", error);
      }
    }

    // Create detailed prompt for age progression with reference to uploaded image
    const prompt = `Create a new photorealistic portrait of the same individual, age +${yearsPassedSinceMissing} years. The image should be photo realistic and keep the same personality and facial structure. Create a hyper-realistic portrait that maintains their core identity while showing natural aging progression.`;

    // Convert image URL to proper format for OpenAI API
    let imageFile: File;
    try {
      const imageResponse = await fetch(image1);
      if (!imageResponse.ok) {
        throw new Error(`Failed to fetch image: ${imageResponse.statusText}`);
      }
      const arrayBuffer = await imageResponse.arrayBuffer();
      const blob = new Blob([arrayBuffer], { type: 'image/jpeg' });
      imageFile = new File([blob], 'reference.jpg', { type: 'image/jpeg' });
    } catch (error) {
      console.error("Error fetching reference image:", error);
      throw new Error("Failed to process reference image");
    }

    // Use images.edit with gpt-image-1 and reference image
    const response = await openai.images.edit({
      model: "gpt-image-1",
      image: imageFile,
      prompt: prompt,
      size: "1024x1024",
      n: 1
    });

    console.log(response)

    // gpt-image-1 returns base64 data instead of URL
    const imageData = response.data?.[0];
    let imageUrl: string;

    if (imageData?.url) {
      // DALL-E format (URL)
      imageUrl = imageData.url;
    } else if (imageData?.b64_json) {
      // gpt-image-1 format (base64)
      imageUrl = `data:image/png;base64,${imageData.b64_json}`;
    } else {
      throw new Error("No image generated by OpenAI");
    }

    return NextResponse.json({
      imageUrl,
      yearsProgressed: yearsPassedSinceMissing,
      estimatedCurrentAge,
      prompt: prompt.substring(0, 200) + "..." // First 200 chars for reference
    });

  } catch (error) {
    console.error("Image generation error:", error);
    return NextResponse.json(
      {
        error: "Failed to generate aged progression image",
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
